# -*- coding: utf-8 -*-
"""FYPProject.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1fIuiCOMUnbX0QDxtwV-43QxGiZsUoy7c
"""

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

dataset = pd.read_csv('FypDataset.csv')
dataset

dataset = dataset.dropna(subset=['Medicines'])

x=dataset.iloc[:,2:15].values

y1=dataset.iloc[:,-2].values
y2=dataset.iloc[:,-1].values

from sklearn.preprocessing import LabelEncoder
LE_x=LabelEncoder()
for i in range(x.shape[1]):
    x[:, i] = LE_x.fit_transform(x[:, i])

from sklearn.model_selection import train_test_split
x_train, x_test, y1_train, y1_test = train_test_split(x, y1, test_size=0.2, random_state=0)

from sklearn.model_selection import train_test_split
x_train, x_test, y2_train, y2_test = train_test_split(x, y2, test_size=0.2, random_state=0)

from sklearn.ensemble import RandomForestClassifier
RF1 = RandomForestClassifier(n_estimators=300,random_state=0)
RF1.fit(x_train, y1_train)
RF_pred_symptoms=RF1.predict(x_test)

from sklearn.metrics import confusion_matrix, classification_report
rf1=confusion_matrix(y1_test,RF_pred_symptoms)
print(classification_report(y1_test, RF_pred_symptoms), "\n")

# from sklearn.model_selection import cross_val_score
# cv_scores = cross_val_score(RF1, x, y1, cv=5)
# print("Cross-validation scores:", cv_scores)
# print("Average cross-validation score:", cv_scores.mean())

RF2 = RandomForestClassifier(n_estimators=300,random_state=0)
RF2.fit(x_train, y2_train)
RF_pred_medicines=RF2.predict(x_test)

from sklearn.metrics import confusion_matrix, classification_report
rf2=confusion_matrix(y2_test,RF_pred_medicines)
print(classification_report(y2_test, RF_pred_medicines), "\n")

# cv_scores = cross_val_score(RF2, x, y2, cv=5)
# print("Cross-validation scores:", cv_scores)
# print("Average cross-validation score:", cv_scores.mean())

# pip install matplotlib seaborn

# x = dataset.iloc[:50, 2:15].replace({'Yes': 1, 'No': 0, 'n':0})
# x

# plt.figure(figsize=(12, 6))
# sns.heatmap(x, cmap="coolwarm", linecolor="black", linewidths=0.5)
# plt.title("Heatmap Example", fontsize=16)
# plt.xlabel("Symptoms", fontsize=12)
# plt.ylabel("Patients", fontsize=12)
# plt.show()

RF_pred_symptoms=RF1.predict([[0,0,1,1,1,0,0,0,0,1,1,1,1]])
print("Disease is ", RF_pred_symptoms)
RF_pred_medicines=RF2.predict([[0,0,1,1,1,0,0,0,0,1,0,0,1]])
print("Medicines are ", RF_pred_medicines)

# !pip install flask_cors

from flask import Flask, request, jsonify
import numpy as np
import pickle
from flask_cors import CORS

with open("RF1_Model.pkl", "wb") as file:
     pickle.dump(RF1, file)

with open("RF2_Model.pkl", "wb") as file:
     pickle.dump(RF2, file)

with open("RF1_Model.pkl", "rb") as file:
    RF1 = pickle.load(file)

with open("RF2_Model.pkl", "rb") as file:
    RF2 = pickle.load(file)

app = Flask(__name__)
CORS(app, origins=["http://localhost:5173"])

all_symptoms = [
    "fever", "headache", "pain in body", "nausea", "vomiting",
    "skin rash", "runny nose", "cough", "sore throat", "sweating",
    "diarrhea", "taste loss", "fatigue"
]

@app.route('/predict', methods=['POST'])
def predict():
    try:
        data = request.json
        symptoms_input = data['features']
        symptom_features = [0] * len(all_symptoms)

        for symptom in symptoms_input:
            if symptom in all_symptoms:
                index = all_symptoms.index(symptom)
                symptom_features[index] = 1

        input_features = np.array(symptom_features).reshape(1, -1)

        prediction = RF1.predict(input_features)
        recommendation = RF2.predict(input_features)

        prediction_proba = RF1.predict_proba(input_features)
        max_proba = max(prediction_proba[0])

        if max_proba < 0.6:
            return jsonify({
                "invalidSymptoms": "The combination of symptoms is not well-represented for any disease. Consult a doctor for further advice."
            })

        return jsonify({"diseasePrediction":prediction[0],"recommendedMedicines":recommendation[0],"type":"success"})

    except Exception as e:
        return jsonify({"error": str(e)}), 400

if __name__ == '__main__':
    app.run(debug=True, port=8000)